/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;

}


body {
    font-family: "Lato", sans-serif; /* font is inherit by child tags. More efficient then use the universal selector */
    font-weight: 400;
    font-size: 16px; /* Later we are going to use a better approach */
    line-height: 1.7;
    color: #777;
    padding: 30px; /* padding is not inherit */
}

.header {
    height: 95vh; /* 95% viewport height */
    background-image: linear-gradient(
        to right bottom, 
        rgba(128, 214, 113, 0.8),
        rgba(39, 180, 133, 0.8)), 
        url('../img/hero.jpg');
    background-size: cover;
    background-position: top; /* ensure image always stays at the top of the page */
    position: relative;

    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%)
}

.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    height: 35px;
}

.text-box {
    position: absolute;
    top: 40%; /* relative to the parent element */
    left: 50%;
    transform: translate(-50%, -50%); /* relative to itself */
    text-align: center; /* main button is a text element. This solution is easier than using text-transform */
}

.heading-primary {
    color: #fff;
    text-transform: uppercase; 

    backface-visibility: hidden; /* Trick to fix the little shaking when the animation ends */
    margin-bottom: 60px;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 700;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /*
    animation-delay: 3s;
    animation-iteration-count: 3;
    */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 400;
    letter-spacing: 17.4px;
    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }

    80% {
     transform: translateX(10px);   
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }

    80% {
     transform: translateX(-10px);   
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    border-radius: 100px;
    transition: all .2s; /*initial state */
    position: relative;
}

.btn:hover {
    transform: translateY(-3px); 
    box-shadow: 0 10px 20px rgba(0,0,0,.2); /* x y blur color */  
}

.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 20px rgba(0,0,0,.2);
}

.btn-white {
    background-color: #fff;
    color: #777;
}

.btn::after {
    content: "AFTER";
    display: inline-block;
    height: 100%; /* It works because pseudo-elements behave like a child. So is 100% of the botton height  */
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
}

.btn-white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scale(2);
}